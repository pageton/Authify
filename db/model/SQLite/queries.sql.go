// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqliteDB

import (
	"context"
	"database/sql"
)

const createAuthToken = `-- name: CreateAuthToken :exec
INSERT OR REPLACE INTO Auth (id, userId, token, expiresAt, ipAddress, userAgent)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateAuthTokenParams struct {
	ID        string
	Userid    string
	Token     string
	Expiresat sql.NullTime
	Ipaddress sql.NullString
	Useragent sql.NullString
}

func (q *Queries) CreateAuthToken(ctx context.Context, arg CreateAuthTokenParams) error {
	_, err := q.db.ExecContext(ctx, createAuthToken,
		arg.ID,
		arg.Userid,
		arg.Token,
		arg.Expiresat,
		arg.Ipaddress,
		arg.Useragent,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO Users (id, username, password)
VALUES (?, ?, ?)
RETURNING id, username, password, createdat, updatedat
`

type CreateUserParams struct {
	ID       string
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deleteAuthToken = `-- name: DeleteAuthToken :exec
DELETE FROM Auth
WHERE id = ?
`

func (q *Queries) DeleteAuthToken(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthToken, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM Users
WHERE id = ?
    OR username = ?
`

type DeleteUserParams struct {
	ID       string
	Username string
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.ID, arg.Username)
	return err
}

const getAuthToken = `-- name: GetAuthToken :one
SELECT a.id, a.userid, a.token, a.ipaddress, a.useragent, a.expiresat
FROM Auth a
JOIN Users u ON a.userId = u.id
WHERE a.id = ? OR u.username = ?
LIMIT 1
`

type GetAuthTokenParams struct {
	ID       string
	Username string
}

func (q *Queries) GetAuthToken(ctx context.Context, arg GetAuthTokenParams) (Auth, error) {
	row := q.db.QueryRowContext(ctx, getAuthToken, arg.ID, arg.Username)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Token,
		&i.Ipaddress,
		&i.Useragent,
		&i.Expiresat,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, createdat, updatedat
FROM Users
WHERE id = ?
    OR username = ?
LIMIT 1
`

type GetUserParams struct {
	ID       string
	Username string
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, password, createdat, updatedat
FROM Users
ORDER BY username
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE Users
SET username = ?,
    password = ?,
    updatedAt = CURRENT_TIMESTAMP
WHERE id = ?
    OR username = ?
`

type UpdateUserParams struct {
	Username   string
	Password   string
	ID         string
	Username_2 string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Password,
		arg.ID,
		arg.Username_2,
	)
	return err
}
